package de.tudarmstadt.ukp.dkpro.argumentation.classification.features.lexical;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.uima.fit.util.JCasUtil;
import org.apache.uima.jcas.JCas;

import de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence;
import de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token;
import de.tudarmstadt.ukp.dkpro.tc.api.exception.TextClassificationException;
import de.tudarmstadt.ukp.dkpro.tc.api.features.DocumentFeatureExtractor;
import de.tudarmstadt.ukp.dkpro.tc.api.features.Feature;
import de.tudarmstadt.ukp.dkpro.tc.api.features.FeatureExtractorResource_ImplBase;

/**
 * (c) 2014 Anil Narassiguin
 */

/**
 * Total number of interrogative mark and ratio (ratio per token and per sentences)
 *
 * @author anil
 * @param jcas
 */

public class InterrogativeRatio
extends FeatureExtractorResource_ImplBase
implements DocumentFeatureExtractor
{
    static final String INTERROGATIVE = "interrogative";

    @Override
    public List<Feature> extract(JCas jcas)
        throws TextClassificationException
    {
        double nbToken = JCasUtil.select(jcas, Token.class).size();
        double nbSentences = JCasUtil.select(jcas, Sentence.class).size();
        double nbInterrogative = 0;
        double ratioInterrogative = 0;
        double ratioInterrogativeSentence = 0;
        for (Token token : JCasUtil.select(jcas, Token.class)) {
            if (token.getCoveredText() == "?") {
                nbInterrogative += 1;
            }

        }

        try {
            ratioInterrogative = nbInterrogative / nbToken;
        }
        catch (Exception e) {
            ratioInterrogative = 0;
        }

        try {
            ratioInterrogativeSentence = nbInterrogative / nbSentences;
        }
        catch (Exception e) {
            ratioInterrogativeSentence = 0;
        }

        List<Feature> featList = new ArrayList<Feature>();
        featList.addAll(Arrays.asList(new Feature(INTERROGATIVE + "_total", nbInterrogative)));
        featList.addAll(Arrays.asList(new Feature(INTERROGATIVE + "_ratio", ratioInterrogative)));
        featList.addAll(Arrays.asList(new Feature(INTERROGATIVE + "_ratio_sentence", ratioInterrogativeSentence)));
        return featList;
    }
}
