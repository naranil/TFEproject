package de.tudarmstadt.ukp.dkpro.argumentation.classification.features.syntactic;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.apache.uima.fit.descriptor.ConfigurationParameter;
import org.apache.uima.fit.util.JCasUtil;
import org.apache.uima.jcas.JCas;
import org.apache.uima.resource.ResourceInitializationException;
import org.apache.uima.resource.ResourceSpecifier;

import de.tudarmstadt.ukp.dkpro.argumentation.classification.features.utils.ProductionRulesCollector;
import de.tudarmstadt.ukp.dkpro.core.api.frequency.util.FrequencyDistribution;
import de.tudarmstadt.ukp.dkpro.core.api.syntax.type.constituent.ROOT;
import de.tudarmstadt.ukp.dkpro.core.stanfordnlp.util.TreeUtils;
import de.tudarmstadt.ukp.dkpro.tc.api.features.DocumentFeatureExtractor;
import de.tudarmstadt.ukp.dkpro.tc.api.features.Feature;
import de.tudarmstadt.ukp.dkpro.tc.api.features.FeatureExtractorResource_ImplBase;
import de.tudarmstadt.ukp.dkpro.tc.api.features.meta.MetaCollector;
import edu.stanford.nlp.trees.Tree;

/**
 *
 * @author Christian Stab
 */
public class ProductionRulesTest
extends FeatureExtractorResource_ImplBase
implements DocumentFeatureExtractor
{


    public static final String FN_PRODUCTION_RULE = "ProductionRule_";


    public static final String PARAM_PRODRULES_FD_FILE = "prodRulesFdFile";
    @ConfigurationParameter(name = PARAM_PRODRULES_FD_FILE, mandatory = true)
    private String prodRulesFdFile;


    public static final String PARAM_NUMBER_OF_PRODRULES = "numberOfProdRules";
    @ConfigurationParameter(name = PARAM_NUMBER_OF_PRODRULES, mandatory = true, defaultValue="-1")
    private int numberOfProdRules;


    public static final String PARAM_THRESHOLD = "ruleThreshold";
    @ConfigurationParameter(name = PARAM_THRESHOLD, mandatory = true, defaultValue="0") //10
    private int ruleThreshold;


    public FrequencyDistribution<String> topKProdRules;


    @Override
    public boolean initialize(ResourceSpecifier aSpecifier, Map<String, Object> aAdditionalParams) throws ResourceInitializationException {
        if (!super.initialize(aSpecifier, aAdditionalParams)) {
            return false;
        }

        FrequencyDistribution<String> trainingFD;
        try {
            trainingFD = new FrequencyDistribution<String>();
            trainingFD.load(new File(prodRulesFdFile));
        } catch (Exception e) {
            throw new ResourceInitializationException(e);
        }

        topKProdRules = new FrequencyDistribution<String>();

        if (numberOfProdRules==-1) {
            // consider samples up to a given frequency threshold
            for (String sample : trainingFD.getKeys()) {
                if (trainingFD.getCount(sample)>=ruleThreshold) {
                    topKProdRules.addSample(sample, trainingFD.getCount(sample));
                }
            }
        } else {
            // consider a given number of verbs
            List<String> topK = trainingFD.getMostFrequentSamples(numberOfProdRules);
            for (String sample : topK) {
                topKProdRules.addSample(sample, trainingFD.getCount(sample));
            }
        }

        getLogger().info("Loaded " + topKProdRules.getKeys().size() + " production rules for feature extraction");

        return true;
    }


    public List<Class<? extends MetaCollector>> getMetaCollectorClasses() {
        List<Class<? extends MetaCollector>> metaCollectorClasses = new ArrayList<Class<? extends MetaCollector>>();
        metaCollectorClasses.add(ProductionRulesCollector.class);

        return metaCollectorClasses;
    }


    @Override
    public List<Feature> extract(JCas jcas) {
        List<Feature> featList = new ArrayList<Feature>();

        Collection<ROOT> root = JCasUtil.select(jcas, ROOT.class);
        FrequencyDistribution<String> rules = new FrequencyDistribution<String>();
        if (!root.isEmpty()) {
            Tree tree = TreeUtils.createStanfordTree(root.iterator().next());
            getProductionRules(tree, rules);
        }

        for (String rule : topKProdRules.getKeys()) {
            if (rules.contains(rule)) {
                featList.add(new Feature(FN_PRODUCTION_RULE + rule, rules.getCount(rule)));
            } else {
                featList.add(new Feature(FN_PRODUCTION_RULE + rule, 0));
            }
        }

        return featList;
    }


    public static FrequencyDistribution<String> getProductionRules(Tree tree, FrequencyDistribution<String> rules) {
        if (tree.getChildrenAsList().size()>1) {
            String rule = tree.value() + "->";
            for (Tree t : tree.getChildrenAsList()) {
                rule = rule + t.value() + ",";
            }
            //System.out.println(rule);
            rules.addSample(rule, 1);
        }

        for (Tree t : tree.getChildrenAsList()) {
            getProductionRules(t,rules);
        }

        return rules;
    }

}
