package de.tudarmstadt.ukp.dkpro.argumentation.classification.reader;

import static org.apache.commons.io.IOUtils.closeQuietly;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.io.IOUtils;
import org.apache.uima.cas.CAS;
import org.apache.uima.cas.CASException;
import org.apache.uima.collection.CollectionException;
import org.apache.uima.fit.descriptor.ConfigurationParameter;
import org.apache.uima.jcas.JCas;

import com.ibm.icu.text.CharsetDetector;

import de.tudarmstadt.ukp.dkpro.core.api.metadata.type.DocumentMetaData;
import de.tudarmstadt.ukp.dkpro.core.api.parameter.ComponentParameters;
import de.tudarmstadt.ukp.dkpro.core.io.xmi.XmiReader;
import de.tudarmstadt.ukp.dkpro.tc.api.io.TCReaderSingleLabel;
import de.tudarmstadt.ukp.dkpro.tc.api.type.TextClassificationOutcome;

public class CorpusReaderXmi
    extends XmiReader
    implements TCReaderSingleLabel
    {

    public static final String ENCODING_AUTO = "auto";
    /**
     * Name of configuration parameter that contains the character encoding used by the input files.
     */
    public static final String PARAM_ENCODING = ComponentParameters.PARAM_SOURCE_ENCODING;
    @ConfigurationParameter(name = PARAM_ENCODING, mandatory = true, defaultValue = "UTF-8")
    private String encoding;

    /**
     * Returns the gold label
     */
    @Override
    public String getTextClassificationOutcome(JCas jcas)
        throws CollectionException
    {

        String uriString = DocumentMetaData.get(jcas).getDocumentTitle();
        System.out.println("HERE'S THE URI ========== " + uriString);

        if (uriString.contains("P1")) {
            return "P1";
        }

        if (uriString.contains("P2")) {

            return "P2";
        }

        throw new CollectionException(new IllegalArgumentException(
                "Unknown type of label (neither P1 nor P2): " + uriString));
    }

    @Override
    public void getNext(CAS aCAS)
        throws IOException, CollectionException
    {
        Resource res = nextFile();
        initCas(aCAS, res);

        getLogger().info("Processing doc " + DocumentMetaData.get(aCAS).getDocumentId());

        InputStream is = null;
        try {
            is = new BufferedInputStream(res.getInputStream());
            String documentText;
            if (ENCODING_AUTO.equals(encoding)) {
                CharsetDetector detector = new CharsetDetector();
                documentText = IOUtils.toString(detector.getReader(is, null));
            }
            else {
                documentText = IOUtils.toString(is, encoding);
            }

            // replace awkward characters (chinese etc. by spaces)
            documentText = replaceCharacters(documentText);

            aCAS.setDocumentText(documentText);

        }
        finally {
            closeQuietly(is);
        }
        try {
            JCas jCas = aCAS.getJCas();
            TextClassificationOutcome outcome = new TextClassificationOutcome(jCas);
            outcome.setOutcome(getTextClassificationOutcome(jCas));
            outcome.addToIndexes();
        }
        catch (CASException e) {
            throw new CollectionException(e);
        }
    }

    static final char[] chineseChars = new char[] { (char) 26469, (char) 12356, (char) 12399,
            (char) 25126, (char) 20105 };

    /**
     * TODO comment
     *
     * @param documentText
     *            text
     * @return replaced characters
     */
    private static String replaceCharacters(String documentText)
    {
        String replaced = documentText;

        replaced = replaced.replace((char) 233, 'e');
        replaced = replaced.replace((char) 226, 'a');
        replaced = replaced.replace((char) 195, 'a');
        replaced = replaced.replace((char) 239, 'i');
        for (char c : chineseChars) {
            replaced = replaced.replace(c, ' ');
        }

        // make sure we did not change the length
        if (documentText.length() != replaced.length()) {
            throw new IllegalStateException("Replaced text has different length");
        }

        return replaced;
    }
}
